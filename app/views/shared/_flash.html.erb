<% if flash.any? %>
<div id="flash-notifications" class="fixed top-4 right-4 space-y-2 pointer-events-auto">
  <% flash.each do |name, msg| %>
    <% 
      case name.to_s
      when "notice"
        bg_color = "bg-green-100"
        border_color = "border-green-400"
        text_color = "text-green-700"
        progress_color = "bg-green-500"
        icon_path = "M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
        aria_live = "polite"
      when "alert", "error"
        bg_color = "bg-red-100"
        border_color = "border-red-400"
        text_color = "text-red-700"
        progress_color = "bg-red-500"
        icon_path = "M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
        aria_live = "assertive"
      when "warning"
        bg_color = "bg-yellow-100"
        border_color = "border-yellow-400"
        text_color = "text-yellow-700"
        progress_color = "bg-yellow-500"
        icon_path = "M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
        aria_live = "polite"
      else
        bg_color = "bg-blue-100"
        border_color = "border-blue-400"
        text_color = "text-blue-700"
        progress_color = "bg-blue-500"
        icon_path = "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z"
        aria_live = "polite"
      end
    %>
    
    <div class="flash-notification <%= bg_color %> border <%= border_color %> <%= text_color %> px-4 py-3 rounded-lg relative shadow-lg max-w-sm transform transition-all duration-300 ease-in-out" 
         role="alert" 
         aria-live="<%= aria_live %>"
         data-flash-type="<%= name %>"
         data-auto-dismiss="true">
      
      <!-- Close button -->
      <button type="button" 
              class="absolute top-2 right-2 p-1 rounded-full hover:bg-black hover:bg-opacity-10 transition-colors" 
              onclick="dismissNotification(this.parentElement)"
              aria-label="Close notification">
        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
        </svg>
      </button>
      
      <!-- Content -->
      <div class="flex items-start pr-6">
        <svg class="w-5 h-5 mr-3 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="<%= icon_path %>" clip-rule="evenodd"/>
        </svg>
        <div class="flex-1">
          <span class="text-sm font-medium"><%= msg %></span>
        </div>
      </div>
      
      <!-- Progress bar -->
      <div class="absolute bottom-0 left-0 right-0 h-1 bg-black bg-opacity-10 rounded-b-lg overflow-hidden">
        <div class="progress-bar h-full <%= progress_color %> transition-all duration-100 ease-linear" style="width: 100%"></div>
      </div>
    </div>
  <% end %>
</div>
<% end %>

<style>
  .flash-notification {
    animation: slideInRight 0.3s ease-out;
  }
  
  .flash-notification.dismissing {
    animation: slideOutRight 0.3s ease-in forwards;
  }
  
  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  @keyframes slideOutRight {
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }
</style>

<script>
  function dismissNotification(notification) {
    notification.classList.add('dismissing');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }
  
  function initFlashNotifications() {
    const notifications = document.querySelectorAll('.flash-notification[data-auto-dismiss="true"]');
    
    notifications.forEach(notification => {
      const progressBar = notification.querySelector('.progress-bar');
      const duration = 5000; // 5 seconds
      let startTime = Date.now();
      
      const animate = () => {
        const elapsed = Date.now() - startTime;
        const progress = Math.max(0, 100 - (elapsed / duration) * 100);
        
        if (progressBar) {
          progressBar.style.width = progress + '%';
        }
        
        if (progress > 0) {
          requestAnimationFrame(animate);
        } else {
          dismissNotification(notification);
        }
      };
      
      requestAnimationFrame(animate);
    });
  }
  
  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initFlashNotifications);
  } else {
    initFlashNotifications();
  }
  
  // Also initialize on Turbo page loads
  document.addEventListener('turbo:load', initFlashNotifications);
</script>
